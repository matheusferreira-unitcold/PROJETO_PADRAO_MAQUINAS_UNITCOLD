import tkinter as tk
from tkinter import ttk, messagebox

class FancoleteConfigurador:
    def __init__(self, root):
        self.root = root
        self.root.title("Configurador de Fancoletes")
        self.root.geometry("800x1000")  # Aumentei a altura para acomodar o layout vertical
        
        # Dados hierárquicos
        self.familias = [
            "CR-FTC", "CR-FTH", "CR-FTK", "CF-FCT"
        ]
        
        self.estrutura = {
            "(02) Modelo (Cap. em TR)": [
                ("", "Vazio"),
                ("007", "0.75 TR"),
                ("010", "1.00 TR"),
                ("015", "1.50 TR"),
                ("020", "2.00 TR"),
                ("025", "2.50 TR"),
                ("030", "3.00 TR")
            ],
            "(03) Config Trocador": "EDITAVEL",
            "(04) Parceiro VRF": [
                ("", "Vazio"),
                ("SS", "Samsung"),
                ("TN", "Trane"),
                ("DK", "Daikin"),
                ("LG", "LG")
            ],
            "(05) Tipo ventilador": [
                ("", "Vazio"),
                ("EC", "Radial plenum fan EC"),
                ("AC", "Sirocco motor AC")
            ],
            "(06) Filtragem": [
                ("", "Vazio"),
                ("G4/M5", "Filtragem antes ventilador"),
                ("G4+F9", "Filtragem grossa + fina"),
                ("G4+F9+H14", "Filtragem completa")
            ],
            "(08) Finalização": [
                ("", "Vazio"),
                ("X", "Equipamento padrão"),
                ("E", "Equipamento especial")
            ]
        }
        
        self.selecoes = {nivel: None for nivel in self.estrutura}
        self.familia_selecionada = tk.StringVar()
        self.codigo_exemplo = tk.StringVar()
        self.create_widgets()
    
    def create_widgets(self):
        # Frame principal com scrollbar
        main_frame = tk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        canvas = tk.Canvas(main_frame)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Frame para seleção de família
        familia_frame = tk.Frame(scrollable_frame, padx=10, pady=10)
        familia_frame.pack(fill=tk.X)
        
        tk.Label(familia_frame, text="Família do Fancolete:", 
                font=("Arial", 11)).pack(side=tk.LEFT, padx=5)
        
        familia_combo = ttk.Combobox(
            familia_frame,
            values=self.familias,
            textvariable=self.familia_selecionada,
            state="readonly",
            font=("Arial", 11),
            width=10
        )
        familia_combo.pack(side=tk.LEFT, padx=5)
        familia_combo.bind("<<ComboboxSelected>>", self.atualizar_exemplo)
        
        # Exemplo de código
        exemplo_frame = tk.Frame(scrollable_frame, bd=2, relief=tk.GROOVE, padx=10, pady=5)
        exemplo_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(exemplo_frame, text="Exemplo:", font=("Arial", 10)).pack(side=tk.LEFT)
        self.exemplo_label = tk.Label(
            exemplo_frame, 
            textvariable=self.codigo_exemplo,
            font=("Courier", 10, "bold"),
            wraplength=700
        )
        self.exemplo_label.pack(side=tk.LEFT, padx=10)
        self.atualizar_exemplo()
        
        # Colunas para cada nível (agora verticalmente)
        for nivel, opcoes in self.estrutura.items():
            nivel_frame = tk.Frame(scrollable_frame, bd=2, relief=tk.GROOVE, padx=10, pady=10)
            nivel_frame.pack(fill=tk.X, padx=10, pady=5)
            
            # Título
            tk.Label(nivel_frame, text=nivel, font=("Arial", 11, "bold")).pack(anchor="w", pady=5)
            
            # Configuração especial para o nível do trocador
            if nivel == "(03) Config Trocador":
                self.create_trocador_widgets(nivel_frame, nivel)
            else:
                self.create_standard_widgets(nivel_frame, nivel, opcoes)
        
        # Botões
        btn_frame = tk.Frame(scrollable_frame, pady=15)
        btn_frame.pack(fill=tk.X, padx=10)
        
        tk.Button(
            btn_frame,
            text="Limpar Tudo",
            command=self.limpar_selecoes,
            font=("Arial", 10),
            width=15
        ).pack(side=tk.LEFT, padx=10)
        
        tk.Button(
            btn_frame,
            text="Gerar Código",
            command=self.gerar_codigo,
            font=("Arial", 10, "bold"),
            bg="#4CAF50",
            fg="white",
            width=15
        ).pack(side=tk.LEFT, padx=10)
        
        # Área do código gerado
        tk.Label(scrollable_frame, text="Código gerado:", font=("Arial", 11)).pack(
            anchor="w", padx=10, pady=5)
        
        self.codigo_var = tk.StringVar()
        self.codigo_label = tk.Label(
            scrollable_frame, 
            textvariable=self.codigo_var,
            font=("Courier", 12, "bold"),
            bg="#f0f0f0",
            padx=10,
            pady=5,
            wraplength=700,
            justify=tk.LEFT
        )
        self.codigo_label.pack(fill=tk.X, padx=10, pady=5)
    
    def create_trocador_widgets(self, parent, nivel):
        # Frame principal para o trocador
        trocador_frame = tk.Frame(parent)
        trocador_frame.pack(fill=tk.X, pady=5)
        
        # Variável para armazenar a seleção
        self.trocador_var = tk.StringVar()
        self.selecoes[nivel] = self.trocador_var
        
        # Opção Vazio
        tk.Radiobutton(
            trocador_frame,
            text="Vazio",
            variable=self.trocador_var,
            value="",
            font=("Arial", 9),
            anchor="w"
        ).pack(anchor="w", pady=2)
        
        # Opção Trocador de expansão direta
        exp_direta_frame = tk.Frame(trocador_frame)
        exp_direta_frame.pack(anchor="w", pady=2)
        
        tk.Radiobutton(
            exp_direta_frame,
            text="Trocador expansão direta:",
            variable=self.trocador_var,
            value="0,7/1",  # Valor padrão
            font=("Arial", 9),
            anchor="w"
        ).pack(side=tk.LEFT)
        
        self.exp_capacidade = tk.Entry(
            exp_direta_frame,
            width=4,
            font=("Arial", 9)
        )
        self.exp_capacidade.insert(0, "0,7")
        self.exp_capacidade.pack(side=tk.LEFT, padx=2)
        
        tk.Label(exp_direta_frame, text="/", font=("Arial", 9)).pack(side=tk.LEFT)
        
        self.exp_circuitos = tk.Entry(
            exp_direta_frame,
            width=2,
            font=("Arial", 9)
        )
        self.exp_circuitos.insert(0, "1")
        self.exp_circuitos.pack(side=tk.LEFT)
        
        # Opção Trocador de água gelada
        agua_gelada_frame = tk.Frame(trocador_frame)
        agua_gelada_frame.pack(anchor="w", pady=2)
        
        tk.Radiobutton(
            agua_gelada_frame,
            text="Trocador água gelada:",
            variable=self.trocador_var,
            value="4R",  # Valor padrão
            font=("Arial", 9),
            anchor="w"
        ).pack(side=tk.LEFT)
        
        self.agua_filas = tk.Entry(
            agua_gelada_frame,
            width=2,
            font=("Arial", 9)
        )
        self.agua_filas.insert(0, "4")
        self.agua_filas.pack(side=tk.LEFT, padx=2)
        
        tk.Label(agua_gelada_frame, text="R", font=("Arial", 9)).pack(side=tk.LEFT)
        
        # Selecionar "Vazio" por padrão
        self.trocador_var.set("")
    
    def create_standard_widgets(self, parent, nivel, opcoes):
        # Radiobuttons para seleção única (incluindo vazio)
        var_nivel = tk.StringVar()
        self.selecoes[nivel] = var_nivel
        
        for codigo, descricao in opcoes:
            frame = tk.Frame(parent)
            frame.pack(anchor="w", pady=2)
            
            rb = tk.Radiobutton(
                frame,
                text="",
                variable=var_nivel,
                value=codigo,
                font=("Arial", 9),
                anchor="w"
            )
            rb.pack(side=tk.LEFT)
            
            desc_label = tk.Label(
                frame,
                text=f"{codigo} - {descricao}" if codigo else "Vazio",
                font=("Arial", 9),
                anchor="w",
                justify=tk.LEFT,
                wraplength=650
            )
            desc_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # Selecionar "Vazio" por padrão
        var_nivel.set("")
    
    def atualizar_exemplo(self, event=None):
        familia = self.familia_selecionada.get()
        if familia:
            exemplo = f"{familia}-02-03-04-05-06-08"
            self.codigo_exemplo.set(exemplo)
        else:
            self.codigo_exemplo.set("Selecione uma família")
    
    def limpar_selecoes(self):
        self.familia_selecionada.set("")
        for nivel in self.selecoes:
            self.selecoes[nivel].set("")
        self.exp_capacidade.delete(0, tk.END)
        self.exp_capacidade.insert(0, "0,7")
        self.exp_circuitos.delete(0, tk.END)
        self.exp_circuitos.insert(0, "1")
        self.agua_filas.delete(0, tk.END)
        self.agua_filas.insert(0, "4")
        self.codigo_var.set("")
        self.atualizar_exemplo()
    
    def gerar_codigo(self):
        if not self.familia_selecionada.get():
            messagebox.showwarning("Aviso", "Selecione uma família de fancolete")
            return
        
        partes_codigo = [self.familia_selecionada.get()]
        
        for nivel, var in self.selecoes.items():
            selecao = var.get()
            
            # Tratamento especial para o trocador
            if nivel == "(03) Config Trocador":
                if selecao == "0,7/1":
                    capacidade = self.exp_capacidade.get().strip()
                    circuitos = self.exp_circuitos.get().strip()
                    if not capacidade or not circuitos:
                        messagebox.showwarning("Aviso", "Preencha capacidade e circuitos do trocador")
                        return
                    selecao = f"{capacidade}/{circuitos}"
                elif selecao == "4R":
                    filas = self.agua_filas.get().strip()
                    if not filas:
                        messagebox.showwarning("Aviso", "Preencha o número de filas do trocador")
                        return
                    selecao = f"{filas}R"
            
            if selecao:  # Só adiciona se não for vazio
                partes_codigo.append(selecao)
        
        if len(partes_codigo) == 1:  # Só tem a família
            messagebox.showwarning("Aviso", "Selecione pelo menos uma opção nos níveis")
            return
        
        self.codigo_var.set("-".join(partes_codigo))

if __name__ == "__main__":
    root = tk.Tk()
    app = FancoleteConfigurador(root)
    root.mainloop()